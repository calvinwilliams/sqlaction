// This file generated by sqlaction v0.2.0.0

package xyz.calvinwilliams.sqlaction;

import java.math.*;
import java.util.*;
import java.sql.Time;
import java.sql.Timestamp;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class UserSAO {

	int				id ; // 编号
	String			name ; // 名字
	String			gender ; // 性别
	short			age ; // 年龄
	String			address ; // 地址
	int				level ; // 级别

	int				_count_ ; // defining for 'SELECT COUNT(*)'

	// SELECT * FROM user
	public static int SELECT_ALL_FROM_user( Connection conn, List<UserSAO> userListForSelectOutput ) throws Exception {
		Statement stmt = conn.createStatement() ;
		ResultSet rs = stmt.executeQuery("SELECT * FROM user") ;
		while( rs.next() ) {
			UserSAO user = new UserSAO() ;
			user.id = rs.getInt( 1 ) ;
			user.name = rs.getString( 2 ) ;
			user.gender = rs.getString( 3 ) ;
			user.age = rs.getShort( 4 ) ;
			user.address = rs.getString( 5 ) ;
			user.level = rs.getInt( 6 ) ;
			userListForSelectOutput.add(user) ;
		}
		return userListForSelectOutput.size();
	}

	// SELECT * FROM user WHERE name=?
	public static int SELECT_ALL_FROM_user_WHERE_name_E_( Connection conn, List<UserSAO> userListForSelectOutput, String _1_name ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement("SELECT * FROM user WHERE name=?") ;
		prestmt.setString( 1, _1_name );
		ResultSet rs = prestmt.executeQuery() ;
		while( rs.next() ) {
			UserSAO user = new UserSAO() ;
			user.id = rs.getInt( 1 ) ;
			user.name = rs.getString( 2 ) ;
			user.gender = rs.getString( 3 ) ;
			user.age = rs.getShort( 4 ) ;
			user.address = rs.getString( 5 ) ;
			user.level = rs.getInt( 6 ) ;
			userListForSelectOutput.add(user) ;
		}
		return userListForSelectOutput.size();
	}

	// SELECT name,address FROM user WHERE age<=? AND gender=?
	public static int SELECT_name_j_address_FROM_user_WHERE_age_LE_AND_gender_E_( Connection conn, List<UserSAO> userListForSelectOutput, short _1_age, String _2_gender ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement("SELECT name,address FROM user WHERE age<=? AND gender=?") ;
		prestmt.setShort( 1, _1_age );
		prestmt.setString( 2, _2_gender );
		ResultSet rs = prestmt.executeQuery() ;
		while( rs.next() ) {
			UserSAO user = new UserSAO() ;
			user.name = rs.getString( 1 ) ;
			user.address = rs.getString( 2 ) ;
			userListForSelectOutput.add(user) ;
		}
		return userListForSelectOutput.size();
	}

	// SELECT * FROM user ORDER BY name DESC
	public static int SELECT_ALL_FROM_user_ORDER_BY_name_DESC( Connection conn, List<UserSAO> userListForSelectOutput ) throws Exception {
		Statement stmt = conn.createStatement() ;
		ResultSet rs = stmt.executeQuery("SELECT * FROM user ORDER BY name DESC") ;
		while( rs.next() ) {
			UserSAO user = new UserSAO() ;
			user.id = rs.getInt( 1 ) ;
			user.name = rs.getString( 2 ) ;
			user.gender = rs.getString( 3 ) ;
			user.age = rs.getShort( 4 ) ;
			user.address = rs.getString( 5 ) ;
			user.level = rs.getInt( 6 ) ;
			userListForSelectOutput.add(user) ;
		}
		return userListForSelectOutput.size();
	}

	// SELECT gender,count(*) FROM user GROUP BY gender
	public static int SELECT_gender_j_count_ALL_FROM_user_GROUP_BY_gender( Connection conn, List<UserSAO> userListForSelectOutput ) throws Exception {
		Statement stmt = conn.createStatement() ;
		ResultSet rs = stmt.executeQuery("SELECT gender,count(*) FROM user GROUP BY gender") ;
		while( rs.next() ) {
			UserSAO user = new UserSAO() ;
			user.gender = rs.getString( 1 ) ;
			user._count_ = rs.getInt( 2 ) ;
			userListForSelectOutput.add(user) ;
		}
		return userListForSelectOutput.size();
	}

	// INSERT INTO user (name,gender,age,address,level) VALUES (?,?,?,?,?)
	public static int INSERT_INTO_user( Connection conn, UserSAO user ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement("INSERT INTO user (name,gender,age,address,level) VALUES (?,?,?,?,?)") ;
		prestmt.setString( 1, user.name );
		prestmt.setString( 2, user.gender );
		prestmt.setShort( 3, user.age );
		prestmt.setString( 4, user.address );
		prestmt.setInt( 5, user.level );
		return prestmt.executeUpdate() ;
	}

	// UPDATE user SET level=?
	public static int UPDATE_user_SET_level_E_( Connection conn, int _1_level_ForSetInput ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement("UPDATE user SET level=?") ;
		prestmt.setInt( 1, _1_level_ForSetInput );
		return prestmt.executeUpdate() ;
	}

	// UPDATE user SET address='calvin address',level=10 WHERE name='Calvin'
	public static int UPDATE_user_SET_address_E_calvin_address_j_level_E_10_WHERE_name_E_Calvin_( Connection conn ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement("UPDATE user SET address='calvin address',level=10 WHERE name='Calvin'") ;
		return prestmt.executeUpdate() ;
	}

	// UPDATE user SET level=? WHERE age>? AND gender=?
	public static int UPDATE_user_SET_level_E_WHERE_age_GT_AND_gender_E_( Connection conn, int _1_level_ForSetInput, short _1_age_ForWhereInput, String _2_gender_ForWhereInput ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement("UPDATE user SET level=? WHERE age>? AND gender=?") ;
		prestmt.setInt( 1, _1_level_ForSetInput );
		prestmt.setShort( 2, _1_age_ForWhereInput );
		prestmt.setString( 3, _2_gender_ForWhereInput );
		return prestmt.executeUpdate() ;
	}

	// DELETE FROM user
	public static int DELETE_FROM_user( Connection conn ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement("DELETE FROM user") ;
		return prestmt.executeUpdate() ;
	}

	// DELETE FROM user WHERE name='Calvin'
	public static int DELETE_FROM_user_WHERE_name_E_Calvin_( Connection conn ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement("DELETE FROM user WHERE name='Calvin'") ;
		return prestmt.executeUpdate() ;
	}

	// DELETE FROM user WHERE age<>? AND gender<>?
	public static int DELETE_FROM_user_WHERE_age_NE_AND_gender_NE_( Connection conn, short _1_age, String _2_gender ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement("DELETE FROM user WHERE age<>? AND gender<>?") ;
		prestmt.setShort( 1, _1_age );
		prestmt.setString( 2, _2_gender );
		return prestmt.executeUpdate() ;
	}
}
