// This file generated by sqlaction v0.2.1.0
// WARN : DON'T MODIFY THIS FILE

package xyz.calvinwilliams.sqlaction;

import java.math.*;
import java.util.*;
import java.sql.Time;
import java.sql.Timestamp;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class UserOrderSAO {

	int				id ; // 编号 // PRIMARY KEY
	int				userId ; // 用户编号
	String			itemName ; // 商品名称
	int				amount ; // 数量
	double			totalPrice ;

	int				_count_ ; // defining for 'SELECT COUNT(*)'

	// SELECT /* blablabla~ */ * FROM user_order @@STATEMENT_INTERCEPTOR()
	/*
	public static String STATEMENT_INTERCEPTOR_for_SELECT_HT_blablabla_TH_ALL_FROM_user_order( String statementSql ) {
		
		return statementSql;
	}
	*/
	public static int SELECT_HT_blablabla_TH_ALL_FROM_user_order( Connection conn, List<UserOrderSAO> userOrderListForSelectOutput ) throws Exception {
		Statement stmt = conn.createStatement() ;
		ResultSet rs = stmt.executeQuery( UserOrderSAU.STATEMENT_INTERCEPTOR_for_SELECT_HT_blablabla_TH_ALL_FROM_user_order("SELECT /* blablabla~ */ * FROM user_order") ) ;
		while( rs.next() ) {
			UserOrderSAO userOrder = new UserOrderSAO() ;
			userOrder.id = rs.getInt( 1 ) ;
			userOrder.userId = rs.getInt( 2 ) ;
			userOrder.itemName = rs.getString( 3 ) ;
			userOrder.amount = rs.getInt( 4 ) ;
			userOrder.totalPrice = rs.getDouble( 5 ) ;
			userOrderListForSelectOutput.add(userOrder) ;
		}
		rs.close();
		stmt.close();
		return userOrderListForSelectOutput.size();
	}

	// SELECT * FROM user_order WHERE user_id=?
	public static int SELECT_ALL_FROM_user_order_WHERE_user_id_E_( Connection conn, List<UserOrderSAO> userOrderListForSelectOutput, int _1_userId ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement( "SELECT * FROM user_order WHERE user_id=?" ) ;
		prestmt.setInt( 1, _1_userId );
		ResultSet rs = prestmt.executeQuery() ;
		while( rs.next() ) {
			UserOrderSAO userOrder = new UserOrderSAO() ;
			userOrder.id = rs.getInt( 1 ) ;
			userOrder.userId = rs.getInt( 2 ) ;
			userOrder.itemName = rs.getString( 3 ) ;
			userOrder.amount = rs.getInt( 4 ) ;
			userOrder.totalPrice = rs.getDouble( 5 ) ;
			userOrderListForSelectOutput.add(userOrder) ;
		}
		rs.close();
		prestmt.close();
		return userOrderListForSelectOutput.size();
	}

	// SELECT user.name,user.address,user_order.item_name,user_order.amount,user_order.total_price
	// 					FROM user,user_order
	// 					WHERE user.name=? AND user.id=user_order.user_id
	// 					@@METHOD(queryUserAndOrderByName)
	public static int queryUserAndOrderByName( Connection conn, List<UserSAO> userListForSelectOutput, List<UserOrderSAO> userOrderListForSelectOutput, String _1_name ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement( "SELECT user.name,user.address,user_order.item_name,user_order.amount,user_order.total_price FROM user,user_order WHERE user.name=? AND user.id=user_order.user_id" ) ;
		prestmt.setString( 1, _1_name );
		ResultSet rs = prestmt.executeQuery() ;
		while( rs.next() ) {
			UserSAO user = new UserSAO() ;
			UserOrderSAO userOrder = new UserOrderSAO() ;
			user.name = rs.getString( 1 ) ;
			user.address = rs.getString( 2 ) ;
			userOrder.itemName = rs.getString( 3 ) ;
			userOrder.amount = rs.getInt( 4 ) ;
			userOrder.totalPrice = rs.getDouble( 5 ) ;
			userListForSelectOutput.add(user) ;
			userOrderListForSelectOutput.add(userOrder) ;
		}
		rs.close();
		prestmt.close();
		return userListForSelectOutput.size();
	}

	// SELECT u.name,u.address,o.item_name,o.amount,o.total_price FROM user u,user_order o WHERE u.name=? AND u.id=o.user_id @@STATEMENT_INTERCEPTOR(statementInterceptorForQueryUserAndOrderByName)
	/*
	public static String statementInterceptorForQueryUserAndOrderByName( String statementSql ) {
		
		return statementSql;
	}
	*/
	public static int SELECT_u_O_name_j_u_O_address_j_o_O_item_name_j_o_O_amount_j_o_O_total_price_FROM_user_u_j_user_order_o_WHERE_u_O_name_E_AND_u_O_id_E_o_O_user_id( Connection conn, List<UserSAO> userListForSelectOutput, List<UserOrderSAO> userOrderListForSelectOutput, String _1_name ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement( UserOrderSAU.statementInterceptorForQueryUserAndOrderByName("SELECT u.name,u.address,o.item_name,o.amount,o.total_price FROM user u,user_order o WHERE u.name=? AND u.id=o.user_id") ) ;
		prestmt.setString( 1, _1_name );
		ResultSet rs = prestmt.executeQuery() ;
		while( rs.next() ) {
			UserSAO user = new UserSAO() ;
			UserOrderSAO userOrder = new UserOrderSAO() ;
			user.name = rs.getString( 1 ) ;
			user.address = rs.getString( 2 ) ;
			userOrder.itemName = rs.getString( 3 ) ;
			userOrder.amount = rs.getInt( 4 ) ;
			userOrder.totalPrice = rs.getDouble( 5 ) ;
			userListForSelectOutput.add(user) ;
			userOrderListForSelectOutput.add(userOrder) ;
		}
		rs.close();
		prestmt.close();
		return userListForSelectOutput.size();
	}

	// INSERT INTO user_order
	public static int INSERT_INTO_user_order( Connection conn, UserOrderSAO userOrder ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement( "INSERT INTO user_order (user_id,item_name,amount,total_price) VALUES (?,?,?,?)" ) ;
		prestmt.setInt( 1, userOrder.userId );
		prestmt.setString( 2, userOrder.itemName );
		prestmt.setInt( 3, userOrder.amount );
		prestmt.setDouble( 4, userOrder.totalPrice );
		int count = prestmt.executeUpdate() ;
		prestmt.close();
		return count;
	}

	// UPDATE user_order SET total_price=? WHERE user_id=?
	public static int UPDATE_user_order_SET_total_price_E_WHERE_user_id_E_( Connection conn, double _1_totalPrice_ForSetInput, int _1_userId_ForWhereInput ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement( "UPDATE user_order SET total_price=? WHERE user_id=?" ) ;
		prestmt.setDouble( 1, _1_totalPrice_ForSetInput );
		prestmt.setInt( 2, _1_userId_ForWhereInput );
		int count = prestmt.executeUpdate() ;
		prestmt.close();
		return count;
	}

	// DELETE FROM user_order
	public static int DELETE_FROM_user_order( Connection conn ) throws Exception {
		PreparedStatement prestmt = conn.prepareStatement( "DELETE FROM user_order" ) ;
		int count = prestmt.executeUpdate() ;
		prestmt.close();
		return count;
	}

}
